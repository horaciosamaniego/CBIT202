[{"path":"index.html","id":"datos-del-curso-cbit202-23","chapter":"Capítulo 1 Datos del curso (CBIT202-23)","heading":"Capítulo 1 Datos del curso (CBIT202-23)","text":"Universidad Austral de Chile: Laboratorio de EcoinformaticaNombre asignatura: Introducción al Análisis de Datos GeoespacialesCódigo asignatuta: CBIT202-23Docente responsable: Horacio SamaniegoCorreo electrónico: horaciosamaniego@uach.clCreadores: Derek Corcoran B. & Giorgia Graells C.Modalidad de clases:\nPrácticas\nPresenciales\nConsultas por Discord (chat o video) -\nPrácticasPresencialesConsultas por Discord (chat o video) -Horario de clases: Lunes 9:50 - 13:00 hrsLugar: Sala de computación, Facultad de Ciencias Forestales y Recursos Naturales, Campus Isla Teja, ValdiviaInicio clases: 11 agosto 2025Pausa lectiva 13 - 17 Octubre 2025Término clases: 28 noviembre 2025 (puede modificarse según calendario académico)Web del curso aqui","code":""},{"path":"index.html","id":"descripción-del-curso","chapter":"Capítulo 1 Datos del curso (CBIT202-23)","heading":"1.1 DESCRIPCIÓN DEL CURSO","text":"Este curso tiene como objetivo central adquirir herramientas para el manejo de datos con un énfasis en datos espaciales para el menejo de los recursos naturales y la aproximación y resolución de problemas ambientaleslos. Se busca la creación de competencias en los principios de investigación reproducible, representación y análisis de información espacial y la creación de mapas estáticos e interactivos. Esto permitirá la adquisiciónde herramientas para profundizar el conocimientos acerca del diseño y desarrollo de análisis de datos ambientales complejos y espacialmente explícitos.","code":""},{"path":"index.html","id":"objetivos","chapter":"Capítulo 1 Datos del curso (CBIT202-23)","heading":"1.1.1 OBJETIVOS","text":"Conocer y entender el concepto de Investigación Reproducible como una forma y filosofía de trabajo que permite que las investigaciones sean más ordenadas y replicables, desde la toma de datos hasta la escritura de resultados utilizando R.Conocer y entender el concepto de Investigación Reproducible como una forma y filosofía de trabajo que permite que las investigaciones sean más ordenadas y replicables, desde la toma de datos hasta la escritura de resultados utilizando R.Realizar análisis críticos de la naturaleza de los datos al realizar análisis exploratorios y reforzar conociminetos en estadística.Realizar análisis críticos de la naturaleza de los datos al realizar análisis exploratorios y reforzar conociminetos en estadística.Realizar análisis de datos espaciales, poder hacer mapas y aplicar preguntas de conservación y manejo de recursos naturales.Realizar análisis de datos espaciales, poder hacer mapas y aplicar preguntas de conservación y manejo de recursos naturales.Aprender utilizar de forma proficiente el lenguaje de programación R y la plataforma GitHub en un ambiente de trabajo colaborativo.Aprender utilizar de forma proficiente el lenguaje de programación R y la plataforma GitHub en un ambiente de trabajo colaborativo.","code":""},{"path":"index.html","id":"evaluación","chapter":"Capítulo 1 Datos del curso (CBIT202-23)","heading":"1.2 Evaluación","text":"","code":""},{"path":"index.html","id":"tareas","chapter":"Capítulo 1 Datos del curso (CBIT202-23)","heading":"1.2.1 Tareas","text":"Se entregarán ejercicios semanales que deben ser resueltos.\n","code":""},{"path":"index.html","id":"proyectos","chapter":"Capítulo 1 Datos del curso (CBIT202-23)","heading":"1.2.2 proyectos","text":"Se desarrollán proyectos de análisis y de programación que consistirán en la resolución de un problema, o set de preguntas.","code":""},{"path":"index.html","id":"calificaciones","chapter":"Capítulo 1 Datos del curso (CBIT202-23)","heading":"1.2.3 calificaciones","text":"","code":""},{"path":"index.html","id":"calendario","chapter":"Capítulo 1 Datos del curso (CBIT202-23)","heading":"1.3 Calendario","text":"","code":""},{"path":"index.html","id":"módulo-1-introducción-a-r-y-rstudio","chapter":"Capítulo 1 Datos del curso (CBIT202-23)","heading":"1.3.1 Módulo 1: Introducción a R y RStudio","text":"18 Agosto — Presentación del curso\nR como lenguaje de programación para análisis de datos\nEntorno de RStudio: navegación básica y gestión del espacio de trabajo\nTipos y estructuras de datos: vectores, matrices, data frames y tibbles\nOperaciones aritméticas y lógicas básicas\nIntroducción paquetes y gestión de paquetes\nR como lenguaje de programación para análisis de datosEntorno de RStudio: navegación básica y gestión del espacio de trabajoTipos y estructuras de datos: vectores, matrices, data frames y tibblesOperaciones aritméticas y lógicas básicasIntroducción paquetes y gestión de paquetes","code":""},{"path":"index.html","id":"módulo-2-html-r-markdown-github","chapter":"Capítulo 1 Datos del curso (CBIT202-23)","heading":"1.3.2 Módulo 2: HTML, R, Markdown & Github","text":"25 Agosto — Introducción Markdown y R Markdown\nCreación de informes reproducibles\nSintaxis Markdown\nIncorporación de fragmentos de código R\nFormatos de salida (HTML, PDF, Word)\nInvestigación reproducible\nCreación de informes reproduciblesSintaxis MarkdownIncorporación de fragmentos de código RFormatos de salida (HTML, PDF, Word)Investigación reproducible","code":""},{"path":"index.html","id":"módulo-3-manipulación-de-datos-con-tidyverse","chapter":"Capítulo 1 Datos del curso (CBIT202-23)","heading":"1.3.3 Módulo 3: Manipulación de Datos con Tidyverse","text":"1 Septiembre — datos desde varios formatos (CSV, Excel, bases de datos, etc.)\nIntroducción al tidyverse\nImportación y Exportación de Datos\nManejo de valores faltantes\nLimpieza y preprocesamiento de datos\nIntroducción al tidyverseImportación y Exportación de DatosManejo de valores faltantesLimpieza y preprocesamiento de datos8 Septiembre — manejo de datos\nManipulación de datos con dplyr: select, filter, arrange, mutate, group_by, summarize\nTabulaciones\nOrdenación de datos con tidyr: gather, spread, separate, unite\nTransformación de datos con purrr: programación funcional para análisis de datos\nManipulación de datos con dplyr: select, filter, arrange, mutate, group_by, summarizeTabulacionesOrdenación de datos con tidyr: gather, spread, separate, uniteTransformación de datos con purrr: programación funcional para análisis de datos","code":""},{"path":"index.html","id":"modulo-5-visualización-de-datos","chapter":"Capítulo 1 Datos del curso (CBIT202-23)","heading":"1.3.4 Modulo 5: Visualización de Datos","text":"15 Septiembre — Introducción ggplot2\nCreación de diversos tipos de gráficos (diagramas de dispersión, histogramas, diagramas de caja, gráficos de barras, gráficos de líneas)\nPersonalización de gráficos con estética, escalas y temas\nFacetas y capas de gráficos\nCreación de diversos tipos de gráficos (diagramas de dispersión, histogramas, diagramas de caja, gráficos de barras, gráficos de líneas)Personalización de gráficos con estética, escalas y temasFacetas y capas de gráficos22 Septiembre — Visualización\nVisualización interactiva\nMapview\nVisualización interactivaMapview29 Septiembre — Presentación de resolución de problema en 3’+2’Presentación en ppt (markdown)Resultados y Discusión","code":""},{"path":"index.html","id":"módulo-6-introducción-al-análisis-geoespacial","chapter":"Capítulo 1 Datos del curso (CBIT202-23)","heading":"1.3.5 Módulo 6: Introducción al Análisis Geoespacial","text":"6 Octubre — Introducción los datos espaciales\nLectura y escritura de datos espaciales (shapefiles, GeoJSON, etc.)\nDefinir y transformar proyecciones\nOperaciones espaciales básicas (unión, intersección, búfer)\nAnálisis de datos espaciales\n6 Octubre — Introducción los datos espacialesLectura y escritura de datos espaciales (shapefiles, GeoJSON, etc.)Definir y transformar proyeccionesOperaciones espaciales básicas (unión, intersección, búfer)Análisis de datos espaciales13 Octubre — (Semana de receso)13 Octubre — (Semana de receso)10 20 Octubre — datos en grilla\n- Fuentes y formatos\n- filtros y procesamiento\n- algebra de mapa\n- mapas categóricos, clasificación y reclasificación27 Octubre — Mapas\n- Cartografía\n- Mapas de distintas fuentes\n- Mapas interactivos, mapview y leaflet27 Octubre — Mapas\n- Cartografía\n- Mapas de distintas fuentes\n- Mapas interactivos, mapview y leaflet3 Noviembre — Operaciones de grillas\nOperaciones espaciales conjuntas: puntos, vectores y grillas\nTabular informacion raster\ninterpolaciones\n3 Noviembre — Operaciones de grillasOperaciones espaciales conjuntas: puntos, vectores y grillasTabular informacion rasterinterpolaciones10 Noviembre — Proyectos10 Noviembre — Proyectos17 Noviembre — Proyectos17 Noviembre — Proyectos24 Noviembre — Proyectos24 Noviembre — Proyectos","code":""},{"path":"index.html","id":"recursos-adicionales","chapter":"Capítulo 1 Datos del curso (CBIT202-23)","heading":"1.4 Recursos adicionales","text":"Si bien intentamos buscar ejemplos originales y sets de datos locales, gran parte del material con que trabajaremos ha sido ya\ntrabajado elaborado por otros. Es por eso que se sugiere revisar algunos sitios claves como los siguientes:R Data SciencesStackoverflowGIS Stack ExchangeSpatial Data ScienceR Graph Galleryggplot2 tips","code":""},{"path":"ejercicios-y-proyectos.html","id":"ejercicios-y-proyectos","chapter":"Capítulo 2 Ejercicios y Proyectos","heading":"Capítulo 2 Ejercicios y Proyectos","text":"","code":""},{"path":"ejercicios-y-proyectos.html","id":"tareas-semanales","chapter":"Capítulo 2 Ejercicios y Proyectos","heading":"2.1 Tareas semanales","text":"Una de las evaluacines de este curso consta de pequeñas guías de ejercicios de caracter semanal. Estas representan un 50% de la nota final. Podra encontrar, en la medida que se liberen, los links las mismas continuación.Los archivos que esten en formato Rmd se desplegaran como un archivo de texto, compie este texto en un archivo Rmd en su R Studio.","code":""},{"path":"ejercicios-y-proyectos.html","id":"descargar-ejercicios","chapter":"Capítulo 2 Ejercicios y Proyectos","heading":"2.2 Descargar Ejercicios","text":"Tareas 1: Conseptos basicos de programación en R.LINK TAREA 1 PDFTareas 2: Conseptos basicos de programación en R.LINK TAREA 2 PDF.Tareas 3: Conseptos basicos de programación en R.LINK TAREA 3 RMDO ejecute el siguiente código para descargar el archivo en su working directoryTareas 4: Conseptos basicos de programación en R.LINK TAREA 4 RMDO ejecute el siguiente código para descargar el archivo en su working directory","code":"\ngithubURL <- 'https://raw.githubusercontent.com/CBIT202-18-Analisis-de-datos-geo/Ejercicios_CBIT202/main/RMarkdown/Ejercicios_3_CBIT202_R.Rmd'\n\ndownload.file(githubURL, \"Ejercicios_3_CBIT202_R.Rmd\")\ngithubURL <- 'https://raw.githubusercontent.com/CBIT202-18-Analisis-de-datos-geo/Ejercicios_CBIT202/blob/main/RMarkdown/Ejercicios_4_CBIT202.Rmd'\n\ndownload.file(githubURL, \"Ejercicios_4_CBIT202_R.Rmd\")"},{"path":"ejercicios-y-proyectos.html","id":"proyecto","chapter":"Capítulo 2 Ejercicios y Proyectos","heading":"2.3 Proyecto","text":"LINK PROYECTO","code":""},{"path":"introducción.html","id":"introducción","chapter":"Capítulo 3 Introducción","heading":"Capítulo 3 Introducción","text":"R es un entorno y lenguaje de programación con un enfoque al análisis\nestadístico. Permite hacer todos los análisis numéricos que requieras en\ntu vida profesional. Es una implementación de libre distribución de otro\nprograma estadístico de uso comercial, S. Al ser software libre, es la\ncomunidad de usuarios la que guía su desarrollo, transformándolo en uno\nde los programas más versátiles para trabajos cuantitativos existentes\nhoy en día. La página principal desde la que se puede acceder los\narchivos y documentación necesarias para su utilización es:www.r-project.orgSi bien R es un software que puede usarse desde la línea de comando,\npara trabajar utilizaremos http://www.rstudio.org.Este es un Entorno de Desarrollo Integrado (IDE, por su sigla en inglés)\nque, al igual que R, es software libre y permite integrar herramientas\nnecesarias para el desarrollo y así facilitarlo. La página oficial para\ndescargarlo es:www.rstudio.com","code":""},{"path":"introducción.html","id":"objetos","chapter":"Capítulo 3 Introducción","heading":"3.1 Objetos","text":"En términos genéricos, todos los elementos que R maneja son objetos. Un\nobjeto tiene ciertas propiedades y en ocasiones es capaz de llevar \ncabo ciertas tareas si se le dan los argumentos necesarios. Por ejemplo,\nun teléfono es capaz de realizar llamadas siempre que le demos el número\nmarcar.","code":""},{"path":"introducción.html","id":"variables","chapter":"Capítulo 3 Introducción","heading":"3.2 Variables","text":"Al momento de trabajar, es probable que necesitemos guardar valores o\ncálculos, de manera que necesitemos escribirlos cada vez que los\nusemos, para esto utilizamos variables.Para realizar una asignación de variable:Luego, podemos utilizar el valor contenido en la variable, utilizando su\nnombre:","code":"\na = 200\nprint(a)\n#> [1] 200"},{"path":"introducción.html","id":"tipos-de-variables","chapter":"Capítulo 3 Introducción","heading":"3.2.1 Tipos de variables","text":"Existen diversos tipos o clases de variables, dependiendo de las\ncaracterísticas del objeto que les es asignado. Para conocer qué tipo\ncorresponde un objeto usamos class:","code":"\nx=7\nx\n#> [1] 7\nclass (x)\n#> [1] \"numeric\"\nx=5/3\nx\n#> [1] 1.666667\nclass (x)\n#> [1] \"numeric\"\nx=\"Trece\"\nx\n#> [1] \"Trece\"\nclass (x)\n#> [1] \"character\""},{"path":"introducción.html","id":"funciones","chapter":"Capítulo 3 Introducción","heading":"3.3 Funciones","text":"Muchas cosas en R pueden hacerse través del uso de funciones, estas\npermiten realizar operaciones típicas sin necesidad de escribir grandes\ncantidades de código. Por ejemplo:Los datos o variables que van dentro de las funciones, se denominan\nargumentos y cada función requiere que se le entreguen los argumentos\napropiados para ejecutar la acción prevista.Por ejemplo, la función mean() puede calcular el promedio si como\nargumentos se le pasan letras.Esto es importante, porque al introducir datos podemos estar utilizando\nnúmeros como palabras:1, 2, 3 ≠ “1”, “2”, “3”Si nos encontramos con este problema, debemos transformar los datos al\ntipo o clase adecuada, con las funciones:.numeric() y . character()x`","code":"\nsqrt(10)\n#> [1] 3.162278\nround(1.9)\n#> [1] 2\nseq(0,10)\n#>  [1]  0  1  2  3  4  5  6  7  8  9 10\nseq(0,10,2)\n#> [1]  0  2  4  6  8 10\nrep(5,10)\n#>  [1] 5 5 5 5 5 5 5 5 5 5\npaste(seq(5,10), \"elefantes\")\n#> [1] \"5 elefantes\"  \"6 elefantes\"  \"7 elefantes\" \n#> [4] \"8 elefantes\"  \"9 elefantes\"  \"10 elefantes\"\nmean(c(\"a\",\"b\",\"c\"))\n#> Warning in mean.default(c(\"a\", \"b\", \"c\")): argument is not\n#> numeric or logical: returning NA\n#> [1] NA"},{"path":"introducción.html","id":"vectores","chapter":"Capítulo 3 Introducción","heading":"3.4 Vectores","text":"Conjunto ordenado de valores del mismo tipo, agrupados en un único\nobjeto. Para crear una variable vector utilizamos:Cada objeto dentro de un vector posee un índice, el cual indica la\nposición que ocupa dentro del vector, para acceder una posición\nespecífica usamos:y si queremos reemplazar alguno de esos objetos:Un vector permite almacenar varios valores en una única variable y\npermite ejecutar operaciones o funciones un conjunto de datos:o incluso realizar operaciones entre vectores:","code":"\nv = c(1,1,2,3)\nvector = c(\"mi\", \"primer\", \"vector\")\nvector\n#> [1] \"mi\"     \"primer\" \"vector\"\nvector[1]\n#> [1] \"mi\"\nvector[2]\n#> [1] \"primer\"\nvector[3] \n#> [1] \"vector\"\nvector[2]=\"segundo\"\nvector\n#> [1] \"mi\"      \"segundo\" \"vector\"\nvector = c(1,2,3,4,5)\nvector*2\n#> [1]  2  4  6  8 10\nvector^2\n#> [1]  1  4  9 16 25\nv1=c(1:3)\nv2=c(6,8,10)\nv1\n#> [1] 1 2 3\nv2\n#> [1]  6  8 10\nv1 + v2\n#> [1]  7 10 13\nv1*v2\n#> [1]  6 16 30\nv3=c(\"a\",\"b\",\"c\")\nv1 * v3\n#> Error in v1 * v3: non-numeric argument to binary operator"},{"path":"introducción.html","id":"instalar-librerías","chapter":"Capítulo 3 Introducción","heading":"3.5 Instalar librerías","text":"Muchas veces las funciones incorporadas en R son insuficientes para\nnuestros fines, por lo que es necesario instalar paquetes o “packages”\nde herramientas hechas por la comunidad. En este caso, usaremos el\npaquete “openxlsx”, que nos permite leer archivos Excel. Para\ninstalarlo:Debe hacerse una única vez, los paquetes quedan instalados en nuestra\nversión de R. Y para usarlo dentro de nuestro proyecto:Debe incluirse en cada proyecto donde queramos usarlo y ejecutarse cada\nvez que abrimos R.","code":"\ninstall.packages(\"openxlsx\")\nlibrary(openxlsx)"},{"path":"introducción.html","id":"r-notebook","chapter":"Capítulo 3 Introducción","heading":"3.6 R Notebook","text":"Un Notebook en R es un documento con bloques o “chunks” que pueden ser\nejecutados directa e interactivamente, para así visualizar los\nresultados directamente bajo el código.Para instalar esta librería:Una vez instalada, puedes crear un nuevo notebook en RStudio llendo \nFile -> new file -> R notebook.Agrega un nuevo chunk haciendo click en el botón Insert Chunk en la\nbarra de herramientas o presionando Ctrl+Alt+IUn chunk puede ser ejecutado usando:Haciendo click en el triángulo verde o “Run Current Chunk” en la\nesquina superior derecha de cada chunk.Haciendo click en el triángulo verde o “Run Current Chunk” en la\nesquina superior derecha de cada chunk.Clickeando al interior de un chunk y presionando Ctrl + Enter.Clickeando al interior de un chunk y presionando Ctrl + Enter.De ambas formas se ejecutará todo el código contenido dentro de el\nchunk.Cuando guardas ul notebook, un archivo HTML que contiene el código y los\nresultados se guardará junto él (Click en el botón de Preview o\npresiona Ctrl+Shift+K para previsualizar el archivo HMTL)","code":"\ninstall.packages(\"rmarkdown\")"},{"path":"introducción.html","id":"leer-datos","chapter":"Capítulo 3 Introducción","heading":"3.7 Leer datos","text":"Delimitados por coma: read_csv(“file.csv”)Con cualquier delimitador: read_delim(“file.txt”, delim = “|”)","code":""},{"path":"introducción.html","id":"ejercicios","chapter":"Capítulo 3 Introducción","heading":"3.8 Ejercicios","text":"Cree una nueva variable que contenga un vector con 10 números aleatoriosmultiplíquela por seis.cree una segunda variable que contenga una secuencia de 5 caracterescombine las dos variable en una sola variable¿cuál es el largo de esta última variable creada?¿de qué tipo es esta variable?¿qué sucede si divie esta última variable por 3?cree un vector con los elementos 1 2 3 4 5 6 y llámelo xcree un nuevo vector con los elementos 10 20 30 40 50 y llámelo y¿qué ocurre si intenta sumar x e y? expliqueagregue el valor 60 al vector y (ayuda: puedes usar la función c())sume x e ymultiplique x e ycree un data.frame con el mímimo código posible usando los datos de la siguiente imagen y llámelo z:cree un dataframe de datos ficticios que represente una muestra de 100 individuos de aves y su tamaño corporal. Use 4 tipos de aves: un paseriforme, un columbiforme, un rapaz y trochiliformes en aproximadamente las mismas proporciones. (Averigue el real tamaño promedio de cada grupo)grafique los pesos corporales de cada grupo (ayuda: puede usar graficos de distribuciones, caja y bigote o bien de violín)","code":""},{"path":"principios-de-tidydata.html","id":"principios-de-tidydata","chapter":"Capítulo 4 Principios de Tidydata","heading":"Capítulo 4 Principios de Tidydata","text":"Gran parte del manejo de datos consiste en limpiar, ordenar,\nredistribuir, reemplazar datos. La gran mayoría de esas tareas son\ncomplejas y repetitivas.La documentación dice\naqui\nque:Los principios de tidydata (datos ordenados, en castellano)\nproporcionan una forma estándar de organizar los valores de los datos\ndentro de un conjunto de datos. Un estándar facilita la limpieza\ninicial de los datos, ya que es necesario empezar de cero y\nreinventar la rueda cada vez. El estándar tidydata se ha diseñado para\nfacilitar la exploración y el análisis de los datos, y para\nsimplificar el desarrollo de herramientas de análisis de datos que\nfuncionen bien juntas. Las herramientas actuales suelen requerir\ntraducción. Hay que dedicar tiempo procesar los resultados de una\nherramienta para poder introducirlos en otra. Los conjuntos de datos\nordenados y las herramientas ordenadas trabajan codo codo para\nfacilitar el análisis, lo que permite centrarse en la parte\ninteresante del problema, en lo “aburrido” de la logística de los\ndatos.","code":""},{"path":"principios-de-tidydata.html","id":"definiciones","chapter":"Capítulo 4 Principios de Tidydata","heading":"4.1 Definiciones","text":"En el manejo estadístico de los datos estructuramos, usualmente, con\ntablas (dataframes) con filas y columnas. Las columnas siempre tienen\ntítulos, aunque las filas solo veces.Usemos el set de datos de ejemplo llamado iris, pero le vamos \nagregar un año de colecta ficticio. Para eso, vamos crear un vector\ncon 3 fechas asignadas de forma aleatoria cada fila. Veamos las\nprimeras 7 filas con la función head().","code":"\n\ndata(iris)\naño <- sample(rep(c(\"2003\",\"2013\",\"2023\"), nrow(iris) / 3))\n\niris$Año <- año\n\nkableExtra::kable(head(iris,7))"},{"path":"principios-de-tidydata.html","id":"lógica-y-funciones","chapter":"Capítulo 4 Principios de Tidydata","heading":"4.2 Lógica y funciones","text":"La lógica básica para el manejo de datos usando dplyr es que el\nresultado de una operación puede ser “conectada” otra, lo que facilita\nla letura del código cuando lo revisitamos. Para eso existe una operador\nque hace esta conexión.","code":""},{"path":"principios-de-tidydata.html","id":"funciones-esenciales","chapter":"Capítulo 4 Principios de Tidydata","heading":"4.2.1 Funciones esenciales","text":"pipe: |>group_by (agrupa datos)summarize (resume datos agrupados)filter (Encuentra filas con ciertas condiciones)select junto starts_with, ends_with o containsmutate (Genera variables nuevas)arrange ordenar","code":""},{"path":"principios-de-tidydata.html","id":"pipe","chapter":"Capítulo 4 Principios de Tidydata","heading":"4.2.2 pipe","text":"Esta “conexión”, se hace con este operador %>% o bien |>. La\ndiferencia entre los dos es que el uso del segundo debieras requerir\npre cargar la librería y es de uso mas reciente.por ejemplo, podemos calcular el largo promedio de los petalos de las\nespecie en el set de datos iris.","code":"\nlibrary(dplyr)\niris |>\n  group_by(Species) |>\n  summarize(Promedio=mean(Petal.Length)) \n#> # A tibble: 3 × 2\n#>   Species    Promedio\n#>   <fct>         <dbl>\n#> 1 setosa         1.46\n#> 2 versicolor     4.26\n#> 3 virginica      5.55"},{"path":"principios-de-tidydata.html","id":"agrupar","chapter":"Capítulo 4 Principios de Tidydata","heading":"4.2.3 Agrupar","text":"dplyr provee un set acotado de funciones, pero muy poderosas para\nmanejar y ordenarnos con los datos. El ejemplo anterior muestra como se\nconecta una función con otra. Lo primero que hace es definir la tabla\nsobre la que vamos trabajar, iris. Esta tabla es luego agrupada por\nla columna Species que es finalmente usada en la función summarize\npara calcular la media sobre los groupos de filas para cada especie.De forma similar, podriamos también buscar la varianza de todas las\ncolumnas que son de tipo numérico, adjuntar una columna con el número de\nfilas sobre el que calculamos dicha varianza y luego imprimirla la\npantalla de forma mas estilizada.","code":"\niris |>\n  group_by(Species) |>\n  summarise(across(where(is.numeric), var, na.rm = TRUE), N = n())|>\n  kableExtra::kable() |>\n  kableExtra::kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = F)"},{"path":"principios-de-tidydata.html","id":"filtrar","chapter":"Capítulo 4 Principios de Tidydata","heading":"4.2.4 Filtrar","text":"Filter nos permite encontrar, y operar, solo sobre filas que cumplen una\ncondición determinada. Por ejemplo solo un tipo de especieDebemos tener en cuenta que si usamos filter tendremos que siempre tener\nun operador en el argumento de la función. En este caso era el operado\n== que es un igual, pero de forma literal, como una asignación.\nOtro ejemplo podría ser seleccionar aquellas filas que tengan un largo\nde petalos mayor 4.5, por ejemplo","code":"\niris |>\n  filter(Species == 'virginica') |>\n  kableExtra::kable() |> \n  kableExtra::kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = F) |>\n  kableExtra::scroll_box(height = \"250px\")\niris |>\n  filter(Petal.Length > 4.5) |>\n  kableExtra::kable() |>\n  kableExtra::kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = F) |>\n  kableExtra::scroll_box(height = \"250px\")"},{"path":"principios-de-tidydata.html","id":"crear-nuevas-variables","chapter":"Capítulo 4 Principios de Tidydata","heading":"4.2.5 Crear nuevas variables","text":"Con mutate() podemos crear una nueva columna de forma explícita. Por\nejemplo, si quisieramos saber cuales son las especies y años en que se\ncolectaron especies con una razon largo/ancho determinado.","code":"\niris |>\n  mutate(Petal.Ratio = Petal.Length/Petal.Width)|>\n  select(Petal.Ratio,Species,Año) |>\n  group_by(Species,Año) |>\n  summarize(Petal.Ratio.Mean = mean(Petal.Ratio)) |>\n  filter(Petal.Ratio.Mean > median(Petal.Ratio.Mean))\n#> `summarise()` has grouped output by 'Species'. You can\n#> override using the `.groups` argument.\n#> # A tibble: 3 × 3\n#> # Groups:   Species [3]\n#>   Species    Año   Petal.Ratio.Mean\n#>   <fct>      <chr>            <dbl>\n#> 1 setosa     2023              7.38\n#> 2 versicolor 2023              3.33\n#> 3 virginica  2023              2.87"},{"path":"principios-de-tidydata.html","id":"responder","chapter":"Capítulo 4 Principios de Tidydata","heading":"4.2.6 Responder:","text":"¿Escriba la pregunta que responde el análisis?En función del último análisis, ¿existe diferencia interespecífica\nen la relación entre largo y ancho largo para estes grupo de\nespecies? -¿Cómo formularías la pregunta anterior de forma mas\nprecisa en función del análisis anterior?","code":""},{"path":"principios-de-tidydata.html","id":"cambiar-formato-de-tabla","chapter":"Capítulo 4 Principios de Tidydata","heading":"4.3 Cambiar formato de tabla","text":"Muchas veces es necesario reorientar la tabla de datos.Primero, podríamos interesarnos en definir clases para las muestras.\nDefinimos tamaños como clases usando terciles.Luego vamos re-orientar la tabla de manera poder indagar si existe\ndiferencia entre especies respecto de la característica Tamaño","code":"\netiquetas <- c(\"alto\",\"medio\",\"bajo\")\nmiIris <- iris |>\n  mutate(Tamaño = factor(ntile(Petal.Length/Petal.Width,3),ordered = TRUE, labels = etiquetas))\nmiIris |>\n  select(Species, Año,Tamaño,Sepal.Width) |>\n  tidyr::pivot_wider(names_from = Tamaño, values_from = Sepal.Width,values_fn=mean) |>\n  kableExtra::kable()"},{"path":"principios-de-tidydata.html","id":"podemos-explicar-que-sucedió-aquí","chapter":"Capítulo 4 Principios de Tidydata","heading":"4.3.1 ¿Podemos explicar que sucedió aquí?","text":"¿En qué caso aparecen los NA?¿Qué tipo de gráfico evidenciaría la relación entre el ratio\nlargo:ancho del pétalo y el ancho del sépalo?grafica","code":""},{"path":"principios-de-tidydata.html","id":"ejercicio","chapter":"Capítulo 4 Principios de Tidydata","heading":"4.4 Ejercicio","text":"Usando la base de datos del repositorio del ministerio de ciencias, genera un dataframe que responda lo siguiente:¿Qué proporción de las comunas ha tenido en algún momento más de 50 casos por cada 100.000 habitantes?Genera un dataframe, donde aparezca para cada comuna que haya tenido sobre 50 casos por cada 100.000 habitantes, cuantos días ha tenido sobre ese valor.Genera una tabla con las comunas que han tenido sobre 50 casos por cada 100.000 habitantes y de esas comunas crea una variable que sea la prevalencia máxima de dicha comuna.","code":"\nurl <- \"https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto19/CasosActivosPorComuna_std.csv\"\nCasos_Activos <- read_csv(url)"},{"path":"principios-de-tidydata.html","id":"bonus-esto-requiere-investigar-no-basta-con-lo-que-aprendimos","chapter":"Capítulo 4 Principios de Tidydata","heading":"4.5 Bonus (Esto requiere investigar no basta con lo que aprendimos)","text":"Ve cuales son las 10 comunas que han tenido la mayor mediana de prevalencia, para cada una de estas 10 comunas, genera una tabla con la mediana, prevalencia máxima y fecha en que se alcanzó la prevalencia máximaVe cuales son las 10 comunas que han tenido la mayor mediana de prevalencia, para cada una de estas 10 comunas, genera una tabla con la mediana, prevalencia máxima y fecha en que se alcanzó la prevalencia máximaLa prevalencia es la proporción de la población afectada en un período de tiempo determinado.La prevalencia es la proporción de la población afectada en un período de tiempo determinado.","code":""},{"path":"principios-de-tidydata.html","id":"recursos","chapter":"Capítulo 4 Principios de Tidydata","heading":"4.6 Recursos","text":"data wrangling cheatsheettablas “bonitinhas” con Kable","code":""},{"path":"rmarkdown.html","id":"rmarkdown","chapter":"Capítulo 5 RMarkdown","heading":"Capítulo 5 RMarkdown","text":"","code":""},{"path":"rmarkdown.html","id":"qué-es-r-markdown","chapter":"Capítulo 5 RMarkdown","heading":"5.1 ¿Qué es R Markdown?","text":"","code":""},{"path":"rmarkdown.html","id":"librerías","chapter":"Capítulo 5 RMarkdown","heading":"5.2 Librerías","text":"","code":"\n# install.packages(\"rmarkdown\")\nlibrary(rmarkdown)"},{"path":"rmarkdown.html","id":"crear-un-r-markdown","chapter":"Capítulo 5 RMarkdown","heading":"5.3 Crear un R Markdown","text":"","code":""},{"path":"rmarkdown.html","id":"encabezado-yaml","chapter":"Capítulo 5 RMarkdown","heading":"5.4 Encabezado YAML","text":"El archivo .Rmd comienza con una sección que definie los parámetros con que se va compilar este .Rmd. En general, usa un lenguaje de serialización que sirve para definir configuraciones.La línea importante es la del output, pues indica el tipo de archivo que se producirá al compilar este .Rmd. Intentaremos usar HTML como output en cuánto se pueda. Es lo mas sencillo y liviano, puede verse en el navegador. Otra posibildad es usar PDF, pero eso requiere tener instaladas librerías que compilen un archivo LaTeX.","code":"---\ntitle: \"Informe de Biodiversity\"\nauthor: Juan Pérez\ndate: 21/Oct/2024\noutput: html_document\n---"},{"path":"rmarkdown.html","id":"sintáxis-de-markdown","chapter":"Capítulo 5 RMarkdown","heading":"5.5 Sintáxis de Markdown","text":"Markdown es un lenguaje parecido html que permite dar un ormato simplificado documentos de texto. Puedes encontrar distintos recursos con ayudas para recordar como usarlo.Markdown Cheatsheet","code":""},{"path":"rmarkdown.html","id":"lo-esencial","chapter":"Capítulo 5 RMarkdown","heading":"5.5.1 Lo esencial","text":"Lo mas simple es los siguiente:Títulos y subtítulos: se escriben con #, pueden haber hasta 4 niveles de subtítulosEnlaces: [texto linkear](http://wwww.ENLACE.cl)Negritas: flankear texto con **, asi **negrita**Itálica: flankear texto con solo un asterisco: *","code":""},{"path":"rmarkdown.html","id":"listas","chapter":"Capítulo 5 RMarkdown","heading":"5.5.2 Listas","text":"Existen 2 tipos de listas, las numeradas y las que .Listas numeradas: Iniciar frase con un número seguido por un punto.\n\nPrimer elemento\nSegundo…\nListas numeradas: Iniciar frase con un número seguido por un punto.Primer elementoSegundo…Listas simples: iniciar frase con un guión seguido por un espacio.\n\nelemento de list\notro elemento\nListas simples: iniciar frase con un guión seguido por un espacio.elemento de listotro elemento","code":""},{"path":"rmarkdown.html","id":"mostrar-ejemplos-de-de-código-sin-ejecutarlos","chapter":"Capítulo 5 RMarkdown","heading":"5.5.3 Mostrar ejemplos de de código (sin ejecutarlos)","text":"Los pedazos de código en la sección de text (del chunk!) irán flankeadas por cremilla inversa `. Habrán veces en que necesitaremos solo mostrar código en la linea (inline), sino que vamos querer ejecutar código. En esos casos, podemos incluir el leguaje que RStudio debe usar para interpretar dicho código. Por ejemplo 2025-08-05 imprime la fecha actual en R: 2025-08-05Usaremos un TAB, o 4 espacios para insertar un bloque de códigoAdemás de las imágenes quepodemos generar durante el uso mismo de R, podemos incrustar imágenes.Imágenes: ![texto que describe imagen](archivo.png), podemos usar los mismos formatos de imagenes que usa HTML. Estos son al menos GIF, JPG y PNG. Nota: ajustar el tamaño de imágenes es considerado mas avanzado y puede hacerse embebiendo código HTML en markdown.Usaríamos:","code":"<figure>       \n  <img src=\"archivo.jpg\"  alt=\"texto que describe la imágen (visible al pasar el mouse sobre ella)\">                      \n  <figcaption>CAPTION.<\/figcaption>\n<\/figure>"},{"path":"rmarkdown.html","id":"figuras","chapter":"Capítulo 5 RMarkdown","heading":"5.5.4 Figuras","text":"Podemos incluir figuras en un .Rmd. Esto es posible de muchas maneras, demostraremos 2:Usando la sintaxis de markdown (“nativa”).![caption](direcion/desde/el/espacio/de/trabajo)\nDebemos tener super claro el espacio de trabajo desde donde se ejecuta este .Rmd. Lo puedes verificar desde la consola usando getwd().Usando la librería knitr. Existe una fnucion knitr::include_graphics() que permite un control mas fino de como se muestra la imagen.Ojo, con la ruta de acceso la imágen!```","code":"  Incluir imágen externa usando kintr:\n  \n  ```{r chunk de imagen, echo=FALSE, out.width=\"50%\", fig.cap=\"A nice image.\"}\n    knitr::include_graphics(\"foo/bar.png\")"},{"path":"rmarkdown.html","id":"md---html","chapter":"Capítulo 5 RMarkdown","heading":"5.6 MD -> HTML","text":"Cuando escribimos en markdown, la gran mayoría de las veces, el interpretador hará una transformación del documento HTML. Esto ocurre de forma interna, tienes nada que hacer. Un ejemplo de ello es pinchar en la opcion Visual, para verlo en HTML, o seguir usando la opción Source en la esquina superior izquierda de RStudio.\n","code":""},{"path":"rmarkdown.html","id":"código-r","chapter":"Capítulo 5 RMarkdown","heading":"5.7 Código R","text":"En un .Rmd, vamos confinar el código que queremos que R procese un un chunk.Usaremos tres (3) cremillas inversas. Se pone entre corchetes {} el lenguaje que queremos que RStudio interprete. En general, este será R, pero podría ser otros que tu instalacion permita, como python, o bash.Pinchando en él, puedes ver que se permite ajustar los parámetros básicos, como título del chunk, si es que quieres que se ejecute o si quieres que muestre los Warnings, etc…OJO QUE FINALMENTE:Es dentro del estos chunks donde ocurre la magia, RStudio los interpreta enviándolos R para que los ejecute. Todo el resto es intepretado como un archivo Markdown que, al ser compilado es enviado un HTML, PDF o DOCX para poder ser distribuido.","code":""},{"path":"rmarkdown.html","id":"recursos-1","chapter":"Capítulo 5 RMarkdown","heading":"5.8 Recursos","text":"Torpedo / CheatSheetR Markdown scientistsdata wrangling cheatsheettablas “bonitinhas” con Kable","code":""}]
